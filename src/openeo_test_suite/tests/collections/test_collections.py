import json
import logging
import re

import pytest
import requests
from stac_validator import stac_validator

from openeo_test_suite.lib.backend_under_test import get_collection_ids

from .openeo_api_collection_tests import OpeneoApiCollectionTests

_log = logging.getLogger(__name__)


def validate_stac_dict(collection_dict):
    stac = stac_validator.StacValidate()
    is_valid_stac = stac.validate_dict(collection_dict)
    c_id = collection_dict["id"]
    if not is_valid_stac:
        _log.error(
            f"The specifc collection JSON for {c_id} is not a valid STAC. stac-validator message: {stac.message}"
        )
    delayed_assert.expect(is_valid_stac)


def test_get_collections(openeo_get_collections):
    """
    Test the /collections endpoint with a GET request.
    Verify that:
    1. The request returns a valid JSON, containing the collections and links lists.
    Both of them are mandatory, see here:
    https://api.openeo.org/#tag/EO-Data-Discovery/operation/list-collections
    2. The JSON document describing each Collection in the list
    is a valid STAC. For each invalid Collection it logs an informative error.
    """

    assert "collections" in openeo_get_collections
    assert "links" in openeo_get_collections
    for coll in openeo_get_collections["collections"]:
        validate_stac_dict(coll)


def test_get_collections_collection_id(openeo_collections_ids, backend_url):
    # I use delayed_assert so that it doesn't stop testing if one collection fails
    # We can't use this way (pytest.mark.parametrize) to loop over the collections
    # The list of collection ids can't be generated by a fixture
    # @pytest.mark.nondestructive
    # @pytest.mark.parametrize("c_id",ids_list)
    def test_collection_detailed_metadata(c_id, backend_url):
        """
        Test the /collections/{collection_id} endpoint with a GET request.
        Verify that the JSON document describing each Collection is a valid STAC.
        For each invalid Collection it logs an informative error.
        """
        collections_url = backend_url + "/collections"
        specific_collection_url = collections_url + "/" + c_id
        resp = requests.get(url=specific_collection_url)
        data = resp.json()
        validate_stac_dict(data)

        # Tests specifics for openEO API specs
        OpeneoApiCollectionTests(data)

    for c_id in openeo_collections_ids:
        test_collection_detailed_metadata(c_id, backend_url)


@pytest.mark.parametrize("collection_id", get_collection_ids())
def test_valid_collection_id(collection_id: str):
    assert re.match(r"^[\w\-.~/]+$", collection_id, flags=re.IGNORECASE)
